import { lockedMaze, lockedMaze2 } from './lockedMaze';

describe('Locked Maze', () => {
  test('#1 It should return if all cells were visited', () => {
    //prettier-ignore
    const maze = [
        [[4, 2],[9,3],[5, 6]],
        [[1, 2],[2, 3],[7, 5]],
        [[1, 8],[2, 9],[6, 5]],
      ];
    expect(lockedMaze2(maze, 1)).toEqual(true);
  });
  test('#2 It should return if all cells were visited', () => {
    //prettier-ignore
    const maze = [
        [[4, 2],[9,3],[5, 6]],
        [[1, 2],[2, 3],[7, 5]],
        [[1, 8],[2, 9],[6, 5]],
      ];
    expect(lockedMaze2(maze, 2)).toEqual(false);
  });
  test('#3 It should return if all cells were visited', () => {
    //prettier-ignore
    const maze = [
        [[4, 2],[9,8],[5, 6],[5, 6]],
        [[1, 2],[2, 3],[7, 5],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6]],
      ];
    expect(lockedMaze2(maze, 2)).toEqual(false);
  });
  test('#4 It should return if all cells were visited', () => {
    //prettier-ignore
    const maze = [
        [[4, 2],[9, 8],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 2],[2, 3],[7, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[31, 42],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]],
        [[1, 8],[2, 9],[6, 5],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6],[5, 6]]
      ];
    expect(lockedMaze2(maze, 41)).toEqual(false);
  });
  test('#5 It should return if all cells were visited', () => {
    //prettier-ignore
    //needs improvement too slow for bigger maze
    const maze = [
        // Row 1
        [
          [11, 21],
          [23, 33, 43],
          [72, 71],
          [81, 91],
          [61, 62],
          [82, 77],
          [83, 78],
          [84, 79],
          [85, 80],
          [92, 93, 94, 95],
        ],
        // Row 2
        [
          [2, 13, 14, 15],
          [100, 99, 98],
          [19, 20],
          [89, 76],
          [88],
          [86],
          [87],
          [90],
          [89, 90, 93],
          [63, 69],
        ],
        // Row 3
        [
          [3, 4, 5],
          [24, 30],
          [53, 37],
          [49, 56],
          [35, 36],
          [47, 48],
          [51, 54, 65],
          [64, 66],
          [69, 58, 45],
          [53, 37],
        ],
        // Row 4
        [
          [31, 22, 59],
          [25, 29, 39],
          [46, 56, 57],
          [55, 45],
          [26],
          [28],
          [27],
          [],
          [49, 40],
          [1, 2, 4, 5, 6],
        ],
        // Row 5
        [
          [31, 42, 51],
          [23, 1, 10, 12],
          [16, 17, 18],
          [],
          [],
          [],
          [],
          [58, 60, 68],
          [],
          [12, 48, 75, 23],
        ],
        // Row 6
        [
          [32, 22, 2],
          [71, 3],
          [35],
          [],
          [],
          [],
          [],
          [],
          [],
          [44, 45],
        ],
        // Row 7
        [
          [52, 72],
          [81, 59],
          [25, 65],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
        ],
        // Row 8
        [
          [34, 38],
          [62, 52],
          [49, 68],
          [],
          [],
          [1, 2, 9, 7],
          [1, 4, 8, 7],
          [],
          [],
          [],
        ],
        // Row 9
        [
          [40, 30],
          [50, 60, 70],
          [45, 12],
          [],
          [],
          [96, 97],
          [],
          [],
          [],
          [],
        ],
        // Row 10
        [
          [6, 7, 8, 9],
          [25, 98, 24],
          [36],
          [],
          [],
          [],
          [],
          [37, 36, 38, 39],
          [65, 66, 67],
          [73, 74, 75],
        ],
      ];

    expect(lockedMaze2(maze, 41)).toEqual(true);
  });
});
